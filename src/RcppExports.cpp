// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// sample_binom
List sample_binom(arma::mat y_matrix, arma::mat Ni, arma::mat X, arma::mat beta_old, int nsave, int nburn, double A0, double d0, double D0, double G0, int BOOST, int verbose, int prior_ig);
RcppExport SEXP _UPG_sample_binom(SEXP y_matrixSEXP, SEXP NiSEXP, SEXP XSEXP, SEXP beta_oldSEXP, SEXP nsaveSEXP, SEXP nburnSEXP, SEXP A0SEXP, SEXP d0SEXP, SEXP D0SEXP, SEXP G0SEXP, SEXP BOOSTSEXP, SEXP verboseSEXP, SEXP prior_igSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type y_matrix(y_matrixSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Ni(NiSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type beta_old(beta_oldSEXP);
    Rcpp::traits::input_parameter< int >::type nsave(nsaveSEXP);
    Rcpp::traits::input_parameter< int >::type nburn(nburnSEXP);
    Rcpp::traits::input_parameter< double >::type A0(A0SEXP);
    Rcpp::traits::input_parameter< double >::type d0(d0SEXP);
    Rcpp::traits::input_parameter< double >::type D0(D0SEXP);
    Rcpp::traits::input_parameter< double >::type G0(G0SEXP);
    Rcpp::traits::input_parameter< int >::type BOOST(BOOSTSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< int >::type prior_ig(prior_igSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_binom(y_matrix, Ni, X, beta_old, nsave, nburn, A0, d0, D0, G0, BOOST, verbose, prior_ig));
    return rcpp_result_gen;
END_RCPP
}
// sample_logit
List sample_logit(arma::mat y_matrix, arma::mat y_categ, arma::mat X, arma::mat beta_old, int nsave, int nburn, double A0, double d0, double D0, double G0, int BOOST, int verbose);
RcppExport SEXP _UPG_sample_logit(SEXP y_matrixSEXP, SEXP y_categSEXP, SEXP XSEXP, SEXP beta_oldSEXP, SEXP nsaveSEXP, SEXP nburnSEXP, SEXP A0SEXP, SEXP d0SEXP, SEXP D0SEXP, SEXP G0SEXP, SEXP BOOSTSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type y_matrix(y_matrixSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type y_categ(y_categSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type beta_old(beta_oldSEXP);
    Rcpp::traits::input_parameter< int >::type nsave(nsaveSEXP);
    Rcpp::traits::input_parameter< int >::type nburn(nburnSEXP);
    Rcpp::traits::input_parameter< double >::type A0(A0SEXP);
    Rcpp::traits::input_parameter< double >::type d0(d0SEXP);
    Rcpp::traits::input_parameter< double >::type D0(D0SEXP);
    Rcpp::traits::input_parameter< double >::type G0(G0SEXP);
    Rcpp::traits::input_parameter< int >::type BOOST(BOOSTSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_logit(y_matrix, y_categ, X, beta_old, nsave, nburn, A0, d0, D0, G0, BOOST, verbose));
    return rcpp_result_gen;
END_RCPP
}
// sample_mnl
List sample_mnl(arma::mat y_matrix, arma::mat y_categ, arma::mat X, arma::mat beta_old, int nsave, int nburn, double A0, double d0, double D0, double G0, int BOOST, int verbose);
RcppExport SEXP _UPG_sample_mnl(SEXP y_matrixSEXP, SEXP y_categSEXP, SEXP XSEXP, SEXP beta_oldSEXP, SEXP nsaveSEXP, SEXP nburnSEXP, SEXP A0SEXP, SEXP d0SEXP, SEXP D0SEXP, SEXP G0SEXP, SEXP BOOSTSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type y_matrix(y_matrixSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type y_categ(y_categSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type beta_old(beta_oldSEXP);
    Rcpp::traits::input_parameter< int >::type nsave(nsaveSEXP);
    Rcpp::traits::input_parameter< int >::type nburn(nburnSEXP);
    Rcpp::traits::input_parameter< double >::type A0(A0SEXP);
    Rcpp::traits::input_parameter< double >::type d0(d0SEXP);
    Rcpp::traits::input_parameter< double >::type D0(D0SEXP);
    Rcpp::traits::input_parameter< double >::type G0(G0SEXP);
    Rcpp::traits::input_parameter< int >::type BOOST(BOOSTSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_mnl(y_matrix, y_categ, X, beta_old, nsave, nburn, A0, d0, D0, G0, BOOST, verbose));
    return rcpp_result_gen;
END_RCPP
}
// sample_probit
List sample_probit(arma::mat y_matrix, arma::mat y_categ, arma::mat X, arma::mat beta_old, int nsave, int nburn, double A0, double d0, double D0, double G0, int BOOST, int verbose);
RcppExport SEXP _UPG_sample_probit(SEXP y_matrixSEXP, SEXP y_categSEXP, SEXP XSEXP, SEXP beta_oldSEXP, SEXP nsaveSEXP, SEXP nburnSEXP, SEXP A0SEXP, SEXP d0SEXP, SEXP D0SEXP, SEXP G0SEXP, SEXP BOOSTSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type y_matrix(y_matrixSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type y_categ(y_categSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type beta_old(beta_oldSEXP);
    Rcpp::traits::input_parameter< int >::type nsave(nsaveSEXP);
    Rcpp::traits::input_parameter< int >::type nburn(nburnSEXP);
    Rcpp::traits::input_parameter< double >::type A0(A0SEXP);
    Rcpp::traits::input_parameter< double >::type d0(d0SEXP);
    Rcpp::traits::input_parameter< double >::type D0(D0SEXP);
    Rcpp::traits::input_parameter< double >::type G0(G0SEXP);
    Rcpp::traits::input_parameter< int >::type BOOST(BOOSTSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_probit(y_matrix, y_categ, X, beta_old, nsave, nburn, A0, d0, D0, G0, BOOST, verbose));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_UPG_sample_binom", (DL_FUNC) &_UPG_sample_binom, 13},
    {"_UPG_sample_logit", (DL_FUNC) &_UPG_sample_logit, 12},
    {"_UPG_sample_mnl", (DL_FUNC) &_UPG_sample_mnl, 12},
    {"_UPG_sample_probit", (DL_FUNC) &_UPG_sample_probit, 12},
    {NULL, NULL, 0}
};

RcppExport void R_init_UPG(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
